#!/bin/sh

# mpv-android-argparse
#
# Github: https://github.com/TheGlockMisc/mpv-android-argparse

VERSION="v0.1.6"

app_readable_dir="/storage/emulated/0/mpv"
app_readable_file="${app_readable_dir}/mpv.tmp.mp4"	# mp4 extension to bypass restriction for multimedia only permission
[ ! -t 0 ] && stdinurl="$(awk '{print $0}')"

# Input Colors
err(){
	printf "\033[38;5;1m%b\033[0m\n" "${1}" >&2
	exit 1
}

suc(){
	printf "\033[38;5;2m%b\033[0m\n" "${1}"
}

if [ -w "${app_readable_dir%*/mpv}" ]; then
	[ -d "${app_readable_dir}" ] || mkdir "${app_readable_dir}"
	[ -e "${app_readable_dir}/var.log" ] && : > "${app_readable_dir}/var.log"
else
	err "Exception: \"${app_readable_dir%*/mpv}\" is unwritable, make sure you have storage permission"
fi

show_help(){
	while IFS= read -r line; do
		printf "%b\n" "${line}"
	done <<-EOF
	Program that lets you pass argument to mpv-android.
	
	 Usage:
	    ${0##*/} [URL|-] <args>
	    ${0##*/} -v | -h | -l
		
	 Options:
	    -v Print Version and Exit
	    -q Only output errors
	    -nc Use netcat (for local termux files)
	    -h Print Help
	    -l Dump Log in stdout (default: disabled)
		
	Use "-" to receive url from stdin.
	"--http-header-fields" headers was delimited using "|".
	
	More info: <https://mpv.io/>.
	Check out manual: <https://mpv.io/manual/master/>.
	EOF
}

# main
mainstripper(){
	printf '%s\n' "${@}" | \
	sed -E 's_---__g	
	s_--__g' | \
	sed -E "/^(file:\/\/|http:\/\/|https:\/\/|ytdl:\/\/|smb:\/\/|bd:\/\/)|^-$|^-(h|v|l|q|nc)$/d
	s_\x27__g
	s_\x22__g
	/.*=/ {
		s_(=)(.*)_\1\x22\2\x22_
		s_[[:space:]]\x22\$_\x22_g
	}
	/msg-level/ {
		s_\x22__g
	}
	/http-header/ {
		s_\x22__g
		s_(=)(.*)_\1\x27\2\x27_
		s_\|_\x27, \x27_g
	}
	s_[[:space:]]\$__g
	s_\x27[[:space:]]_\x27_g"
}

inter_loop(){
	tail -f "${app_readable_dir}/var.log" 2>/dev/null | grep --line-buffer -v "vo/gpu/opengl" &
	trap "killall -9 tail && exit 1" INT HUP
	while true; do
		sleep 3
		grep -Pq '\[(main|cplayer)\] (Exiting.*|.*quit\,)' "${app_readable_dir}/var.log" && { killall -9 tail ; exit 0 ;}
	done
}

nc_file(){
	set -- "${1#file://}" "${2}"
	while true; do
		if [ -e "${1}" ] && [ -n "${2}" ]; then
			{ printf "HTTP/1.0 200 OK\r\nContent-Disposition: inline; filename=\"%s\"\r\nContent-Length: $(wc -c < "${1}")\r\n\r\n" "${1}"; cat "${1}"; } | nc -l "${2}" >/dev/null 2>&1
			[ -n "$!" ] && kill -9 "$!"
		else
			break
		fi
	done
}

start_mpv(){
	for iter; do
		if printf '%s' "${iter}" | grep -qEo "^(file://|http://|https://|ytdl://|smb://|bd://)[^'\"<>]*|^-$"; then
			[ "${iter}" = "-" ] && set -- "${stdinurl}" && break
			set -- "${iter}" && break
		fi
	done
	[ -z "${1}" ] && err 'Exception: No Video URL provided'
	printf '%s' "${1}" | grep -qEo "^(file://|http://|https://|ytdl://|smb://|bd://)[^'\"<>]*|^-$" || err "Invalid type of URL"
	if printf '%s' "${1}" | grep -qEo "file://[^'\"<>]*"; then
		path_file="$(realpath "${1#file://}")"
		[ -e "${path_file#file://}" ] && err "mpv: ${path_file#file://}: No such file or directory"
		set -- "file://${path_file}"
	fi
	if [ "${nc_use}" = "1" ] && printf '%s' "${1}" | grep -qEo "file://[^'\"<>]*"; then
		command -v "nc" >/dev/null || err "Install netcat first!"
		random_port="$(awk -v lh="3000" -v rh="7000" 'BEGIN{srand(); print int(lh+rand()*(rh-lh+1))}')"
		nc_file "${1}" "${random_port}" &
		nc_pid="${!}"
		set -- "http://0.0.0.0:${random_port}"
		trap "kill -9 \\"${nc_pid}\\" && exit 0" INT HUP
	fi
	am start --user current -R 2 -a android.intent.action.VIEW -d "${1}" -n 'is.xyz.mpv/.MPVActivity' >/dev/null 2>&1
	[ "${quiet}" = "1" ] || suc "Video Successfully Launched!"
	# Delay to start activity first before clearing the temp file
	(sleep 5 && : > "${app_readable_file}") &
	[ "${show_log}" = "true" ] && inter_loop
}

arg_parser(){
	for arg; do
		case "${arg}" in
			-v)
				printf '%s\n' "Version: ${VERSION}"
				exit 0
				;;
			-q)
				quiet=1
				;;
			-nc)
				nc_use=1
				;;
			-h)
				show_help
				exit 0
				;;
			-l)
				show_log="true"
				;;
		esac
	done
}

arg_parser "${@}"
mainstripper "${@}" "--log-file=${app_readable_dir}/var.log" > "${app_readable_file}"
start_mpv "${@}"
[ -n "${nc_pid}" ] && wait "${nc_pid}"
